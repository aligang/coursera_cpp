#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>


using namespace std;


struct cli_input_element{
	string operation;
	string bus_name;
	vector<string> stops;
};


void collect_cli_input(map<int,cli_input_element>& cli_input){
	int number_input_records;
	int number_of_bus_stops;
	string input_command;
	string bus_name;
	string stop;
	cin >> number_input_records;
	for  (auto i = 0; i < number_input_records; i++){
		cin >> cli_input[i].operation;
		if (cli_input[i].operation == "NEW_BUS"){
			cin >> cli_input[i].bus_name;
			cin >> number_of_bus_stops;
			for  (auto j = 0; j < number_of_bus_stops; j++){
				cin >> stop;
				cli_input[i].stops.push_back(stop);
			}
		} else if (cli_input[i].operation == "BUSES_FOR_STOP"){
			cin >> stop;
			cli_input[i].stops.push_back(stop);
		} else if (cli_input[i].operation == "STOPS_FOR_BUS"){
			cin >> cli_input[i].bus_name;
		} else if (cli_input[i].operation == "BUSES"){
			//ничо не делать
		}
	}
}


void new_bus(cli_input_element& processing_element, map<string,vector<string>>& bus_routes){
	for (auto& stop:processing_element.stops){
		bus_routes[processing_element.bus_name].push_back(stop);
	}
}


void buses_for_stop(cli_input_element& processing_element, map<string,vector<string>>& bus_routes){
	vector<string> buses_passing_current_stop;
	int first_stop_index = 0;
	string current_stop_name = processing_element.stops[first_stop_index]
	for (auto& bus_route:bus_routes){
		if (count(bus_route.second.begin(), bus_route.second.end(), current_stop_name) >= 0){
			buses_passing_stop.push_back(bus_route.first);

		}
	}
	if (size){
		for (auto& bus:buses){
			cout << bus << " ";
		}
		cout << endl;
	} else {
		cout << "No stop";
	}
}


void stops_for_bus(cli_input_element& processing_element, map<string,vector<string>>& bus_routes){
	 if (bus_routes.count(processing_element.bus_name) == 1){

	 } else {
		 cout << "No buses";
	 }
}


void buses(cli_input_element& processing_element, map<string,vector<string>>& bus_routes){

}



void process_cli_input(map<int,cli_input_element>& cli_input){
	cli_input_element processing_element;
	map<string,vector<string>> bus_routes;
	for (auto& element:cli_input){
		processing_element = element.second;
		if (processing_element.operation == "NEW_BUS"){
			new_bus(processing_element, bus_routes);
		} else if (processing_element.operation == "BUSES_FOR_STOP"){
			buses_for_stop(processing_element, bus_routes);
		} else if (processing_element.operation == "STOPS_FOR_BUS"){
			stops_for_bus(processing_element, bus_routes);
		} else if (processing_element.operation == "BUSES"){
			buses(processing_element, bus_routes);
		}

	}
}

int main(){
	map<int,cli_input_element> cli_input;
	collect_cli_input(cli_input);
	process_cli_input(cli_input);
	return 0;
}
